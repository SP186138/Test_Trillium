<?xml version="1.0" encoding="UTF-8"?>
<TRANFRMR xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <SETTINGS_FILE_ENCODING>UTF8</SETTINGS_FILE_ENCODING>

  
<CATEGORY>

    <INPUT>
      <PARAMETER>
        <INPUT_SETTINGS>
          <ARGUMENTS>
            <ENTRY>
              <ENTRY_ID>1</ENTRY_ID>
              <FILE_QUALIFIER>e5_it_pmatch_p4</FILE_QUALIFIER>
              <DATA_FILE_NAME>stdin</DATA_FILE_NAME>
              <DDL_FILE_NAME>$(DDL)/it_pmatch_p4.ddx</DDL_FILE_NAME>
               <FILE_DELIMITER/>
               <USE_QUOTES_AS_QUALIFIER/>
             
              
              
              <START_RECORD/>
              <MAX_RECORDS/>
              <NTH_SAMPLE/>
              <FILE_TRACE_KEY/>
              <EXCEPTIONS_FILE_NAME/>
              
              
              
            <SELECT_RECORDS/>
</ENTRY>
          </ARGUMENTS>
        </INPUT_SETTINGS>

        <CONDITIONALS>
          <ARGUMENTS>
<ENTRY>
<ENTRY_ID>1</ENTRY_ID>
<FOR_FILES>e5_it_pmatch_p4</FOR_FILES>
<CONDITION>IF (ALWAYS)
        IF (ALWAYS)
    ENDIF
    
    ENDIF</CONDITION>
</ENTRY>
</ARGUMENTS>
        </CONDITIONALS>
      </PARAMETER>
    </INPUT>
    <OUTPUT>
      <PARAMETER>
<OUTPUT_SETTINGS>
          <ARGUMENTS>
            <FILE_QUALIFIER>OUTPUT</FILE_QUALIFIER>
            <DATA_FILE_NAME>stdout</DATA_FILE_NAME>
            <DDL_FILE_NAME>$(DDL)/it_drtranfrmr_p5.ddx</DDL_FILE_NAME>
            
          <SELECT_RECORDS/>
</ARGUMENTS>
        </OUTPUT_SETTINGS>



<FIELD_SCANNING>
	<ARGUMENTS>
		<ENTRY>
			<ENTRY_ID>1</ENTRY_ID>
<ENTRY_DESCRIPTION>Scan the GOUT street type into a temporary field.</ENTRY_DESCRIPTION>
			<SCAN_FIELD>IT_GOUT_DELIVERY_ADDRESS</SCAN_FIELD>
			<TARGET_FIELD>tmp_gout_street_type</TARGET_FIELD>
			<FIELD_JUSTIFICATION>NJ</FIELD_JUSTIFICATION>
			<SCAN_FORMAT>L</SCAN_FORMAT>
			<BETWEEN_SUBSTRING/>
			<AND_SUBSTRING/>
			<RETAIN_BETWEEN_SUBSTRING>N</RETAIN_BETWEEN_SUBSTRING>
			<SCAN_VALUE>" "</SCAN_VALUE>
			<CASE_SENSITIVE_SCAN_VALUE>N</CASE_SENSITIVE_SCAN_VALUE>
			<RETAIN_SCAN_VALUE>Y</RETAIN_SCAN_VALUE>
			<SCAN_FUNCTION>CT</SCAN_FUNCTION>
			<SCAN_DIRECTION>L</SCAN_DIRECTION>
			<SCAN_POSITION>D</SCAN_POSITION>
			<SCAN_LEVEL>F</SCAN_LEVEL>
			<SCAN_CAPTURE>L</SCAN_CAPTURE>
			<WORD_DELIMITER/>
			<CHANGE_VALUE/>
			<CHANGE_OCCURENCES/>
			<FLAG_VALUE/>
			
		</ENTRY>
	</ARGUMENTS>
</FIELD_SCANNING>










<TABLE_RECODING>
	<ARGUMENTS>
		<ENTRY>
			<ENTRY_ID>1</ENTRY_ID>
<ENTRY_DESCRIPTION>Expand IT_GIN_STREET_TYPE abbreviations</ENTRY_DESCRIPTION>
			<FILE_QUALIFIER>RECODE1</FILE_QUALIFIER>
			<TABLE_FILE_NAME>$(USRTABLES)/ita_street_type_abbreviations.tbl</TABLE_FILE_NAME>
			<DDL_FILE_NAME>$(DDL)/recodes.ddx</DDL_FILE_NAME>
			<FILE_DELIMITER>Tab</FILE_DELIMITER>
			<LOOKUP_PHRASE_SEPARATOR/>
			<LOOKUP_TABLE_FIELDS>original_value</LOOKUP_TABLE_FIELDS>
			<LOOKUP_FIELDS_CASE_SENSITIVE>N</LOOKUP_FIELDS_CASE_SENSITIVE>
			<LOOKUP_OUTPUT_FIELDS>IT_GIN_STREET_TYPE</LOOKUP_OUTPUT_FIELDS>
			<LOOKUP_OUTPUT_FIELDS_FORMAT>L</LOOKUP_OUTPUT_FIELDS_FORMAT>
			<RECODE_TABLE_FIELDS>recode_value</RECODE_TABLE_FIELDS>
			<RECODE_TABLE_FIELDS_FORMAT>L</RECODE_TABLE_FIELDS_FORMAT>
			<RECODE_OUTPUT_FIELDS>IT_GIN_STREET_TYPE</RECODE_OUTPUT_FIELDS>
			
		</ENTRY>
		<ENTRY>
			<ENTRY_ID>2</ENTRY_ID>
<ENTRY_DESCRIPTION>Expand IT_GOUT_STREET_TYPE abbreviations</ENTRY_DESCRIPTION>
			<FILE_QUALIFIER>RECODE2</FILE_QUALIFIER>
			<TABLE_FILE_NAME>$(USRTABLES)/ita_street_type_abbreviations.tbl</TABLE_FILE_NAME>
			<DDL_FILE_NAME>$(DDL)/recodes.ddx</DDL_FILE_NAME>
			<FILE_DELIMITER>Tab</FILE_DELIMITER>
			<LOOKUP_PHRASE_SEPARATOR/>
			<LOOKUP_TABLE_FIELDS>original_value</LOOKUP_TABLE_FIELDS>
			<LOOKUP_FIELDS_CASE_SENSITIVE>N</LOOKUP_FIELDS_CASE_SENSITIVE>
			<LOOKUP_OUTPUT_FIELDS>IT_GOUT_STREET_TYPE</LOOKUP_OUTPUT_FIELDS>
			<LOOKUP_OUTPUT_FIELDS_FORMAT>L</LOOKUP_OUTPUT_FIELDS_FORMAT>
			<RECODE_TABLE_FIELDS>recode_value</RECODE_TABLE_FIELDS>
			<RECODE_TABLE_FIELDS_FORMAT>L</RECODE_TABLE_FIELDS_FORMAT>
			<RECODE_OUTPUT_FIELDS>IT_GOUT_STREET_TYPE</RECODE_OUTPUT_FIELDS>
			
		</ENTRY>
		<ENTRY>
			<ENTRY_ID>3</ENTRY_ID>
<ENTRY_DESCRIPTION>Expand tmp_gout_street_type abbreviations</ENTRY_DESCRIPTION>
			<FILE_QUALIFIER>RECODE3</FILE_QUALIFIER>
			<TABLE_FILE_NAME>$(USRTABLES)/ita_street_type_abbreviations.tbl</TABLE_FILE_NAME>
			<DDL_FILE_NAME>$(DDL)/recodes.ddx</DDL_FILE_NAME>
			<FILE_DELIMITER>Tab</FILE_DELIMITER>
			<LOOKUP_PHRASE_SEPARATOR/>
			<LOOKUP_TABLE_FIELDS>original_value</LOOKUP_TABLE_FIELDS>
			<LOOKUP_FIELDS_CASE_SENSITIVE>N</LOOKUP_FIELDS_CASE_SENSITIVE>
			<LOOKUP_OUTPUT_FIELDS>tmp_gout_street_type</LOOKUP_OUTPUT_FIELDS>
			<LOOKUP_OUTPUT_FIELDS_FORMAT>L</LOOKUP_OUTPUT_FIELDS_FORMAT>
			<RECODE_TABLE_FIELDS>recode_value</RECODE_TABLE_FIELDS>
			<RECODE_TABLE_FIELDS_FORMAT>L</RECODE_TABLE_FIELDS_FORMAT>
			<RECODE_OUTPUT_FIELDS>tmp_gout_street_type</RECODE_OUTPUT_FIELDS>
			
		</ENTRY>
	</ARGUMENTS>
</TABLE_RECODING>





















































































































































<CONDITIONALS>
	<ARGUMENTS>
		<ENTRY>
			<ENTRY_ID>1</ENTRY_ID>
			<FOR_FILES>OUTPUT</FOR_FILES>
			<CONDITION>
   /*
   /* ENTRY ID/SUBROUTINE LIST:
   /*   1. main
   /*   2. ita_keep_original_address
   /*   3. ita_parsed_address
   /*   4. ita_postal_matched_address
   /*   5. remove_blank_address_lines
   /*   6. set_address_case
   /*   7. set_name_fields_clear_busname
   /*
/* +----------------------------------------------------------------------------+
/* | ROUTINE: ita_cleanse                                                 ITALY |
/* +----------------------------------------------------------------------------+
/*
/*   Note: we have a challenge with the street type returned by the ITA postal
/*   matcher.  The postal matcher abbreviates street type in an unacceptable
/*   manner.  For instance, VIA is abbreviated to V.  We can not fix this with
/*   parser tuning because the problem occurs after parsing.
/*
/*   Common street types are restored by this data reconstructor using a 3-step
/*   process:
/*
/*   1. A scan operation splits the IT_GOUT_DELIVERY_ADDRESS field and moves the
/*      first word in the delivery address to a temporary field called
/*      "tmp_gout_street_type".
/*
/*   2. Three table recode operations next update specific street type names in
/*      the "tmp_gout_street_type", "GA_GIN_STREET_NAME" and
/*      "GA_GOUT_STREET_NAME" fields.
/*
/*   3. A SET statement rejoins the "tmp_gout_street_type" field back to the
/*      beginning of the IT_GOUT_DELIVERY_ADDRESS field.
/*
   IF(ALWAYS)
      RUN FIELD_SCANNING(ALL)
      RUN TABLE_RECODING(ALL)
      SET IT_GOUT_DELIVERY_ADDRESS = TRIM(tmp_gout_street_type) |: TRIM(IT_GOUT_DELIVERY_ADDRESS)
      IF(IT_GOUT_MATCH_LEVEL IN "0,3" AND PR_REV_GROUP IN "000,002,005,008,009,010,018")
         SET dr_cleanse_level = "2"
         RUN SUBROUTINE(4)
      ELSE
         IF(PR_REV_GROUP IN "000,002,005,008,009,010")
            SET dr_cleanse_level = "1"
            RUN SUBROUTINE(3)
         ELSE
            SET dr_cleanse_level = "0"
            RUN SUBROUTINE(2)
         ENDIF
      ENDIF
      RUN SUBROUTINE(6)
      RUN SUBROUTINE(7)
      SET dr_country       = "IT"
      SET dr_country_name  = "ITA"
   ENDIF
   </CONDITION>
		</ENTRY>
		<ENTRY>
			<ENTRY_ID>2</ENTRY_ID>
			<FOR_FILES>OUTPUT</FOR_FILES>
			<CONDITION>SUBROUTINE
   /* SUBROUTINE: ita_keep_original_address
/* +----------------------------------------------------------------------------+
/* | SUBROUTINE: ita_keep_original_address                                      |
/* +----------------------------------------------------------------------------+
/*
/*   Purpose: Populates the address fields with original input data.
/*
   IF(ALWAYS)
      SET dr_house_number1 = IT_GIN_HOUSE_NUMBER
      SET dr_street_name   = TRIM(TRIM(IT_GIN_STREET_TYPE) |: IT_GIN_STREET_NAME)
      SET dr_house_number2 = TRIM(TRIM(IT_GIN_SUB_BUILDING) |: IT_GIN_SUB_BUILDING_VALUE)
      SET dr_pobox_number  = PR_BOX1_NUMBER
      SET dr_address       = UCASE(TRIM(ADDR_LINE_1_TXT))
      SET dr_address2      = UCASE(TRIM(ADDR_LINE_2_TXT))
      SET dr_address3      = UCASE(TRIM(ADDR_LINE_3_TXT))
      SET dr_city_name     = UCASE(TRIM(CITY_NAME))
      SET dr_region_name   = UCASE(TRIM(TERR_NAME))
      SET dr_postal_code   = UCASE(TRIM(POSTL_AREA_CODE))
   ENDIF
   </CONDITION>
		</ENTRY>
		<ENTRY>
			<ENTRY_ID>3</ENTRY_ID>
			<FOR_FILES>OUTPUT</FOR_FILES>
			<CONDITION>SUBROUTINE
   /* SUBROUTINE: ita_parsed_address
/* +----------------------------------------------------------------------------+
/* | SUBROUTINE: ita_parsed_address                                             |
/* +----------------------------------------------------------------------------+
/*
/*   Purpose: Populates the address fields for an address that did not match the
/*            Italian postal directory.
/*
   IF(ALWAYS)
      /*... Set house_number, street_name, apartment_number and PO box.
      SET dr_house_number1 = IT_GIN_HOUSE_NUMBER
      SET dr_street_name   = TRIM(TRIM(IT_GIN_STREET_TYPE) |: IT_GIN_STREET_NAME)
      SET dr_house_number2 = TRIM(TRIM(IT_GIN_SUB_BUILDING) |: IT_GIN_SUB_BUILDING_VALUE)
      SET dr_pobox_number  = PR_BOX1_NUMBER
      /*... Set address lines.
      SET dr_address       = TRIM(TRIM(DR_STREET_NAME) |: TRIM(DR_HOUSE_NUMBER1) |: DR_HOUSE_NUMBER2)
      SET dr_address2      = TRIM(TRIM(e5_it_pmatch_p4.PR_BOX1_NAME_RECODED) |: e5_it_pmatch_p4.PR_BOX1_NUMBER)
      /* Add the parsed complex name to cleansed street line3.
      IF(PR_COMPLEX1_NAME_RECODED != "")
         SET dr_address3 = TRIM(TRIM(PR_COMPLEX1_NAME_ORIGINAL) |: PR_COMPLEX1_TYPE_RECODED)
      ENDIF
      RUN SUBROUTINE(5)
      /*... Set city, province and postal-code.
      /* Use a more aggressive strategy to get cleansed city name.
      IF(IT_GOUT_POSTAL_CITY != ""  AND
         \  IT_GOUT_MATCH_LEVEL &gt;  "1"    )
         SET dr_city_name   = IT_GOUT_POSTAL_CITY
         SET dr_region_name = IT_GOUT_STATE
         SET dr_postal_code = IT_GOUT_POSTAL_CODE
      ELSE
         SET dr_city_name   = IT_GIN_POSTAL_CITY
         SET dr_region_name = IT_GIN_STATE
         SET dr_postal_code = IT_GIN_POSTAL_CODE
      ENDIF
      /*... If necessary, retain the original address.
      IF(dr_address = "")
         SET dr_address        = TRIM(ADDR_LINE_1_TXT)
         SET dr_address2       = TRIM(ADDR_LINE_2_TXT)
         SET dr_address3       = TRIM(ADDR_LINE_3_TXT)
      ENDIF
   ENDIF
   </CONDITION>
		</ENTRY>
		<ENTRY>
			<ENTRY_ID>4</ENTRY_ID>
			<FOR_FILES>OUTPUT</FOR_FILES>
			<CONDITION>SUBROUTINE
   /* SUBROUTINE: ita_postal_matched_address
/* +----------------------------------------------------------------------------+
/* | SUBROUTINE: ita_postal_matched_address                                     |
/* +----------------------------------------------------------------------------+
/*
/*   Purpose: Populates the address fields for an address that matched the
/*            Italian postal directory.
/*
   IF(ALWAYS)
      /* Use postal-matcher values
      SET dr_house_number1 = IT_GOUT_HOUSE_NUMBER
      SET dr_street_name   = TRIM(TRIM(IT_GOUT_STREET_TYPE) |: TRIM(IT_GOUT_STREET_NAME) |: IT_GOUT_STREET_DIRECTION)
      SET dr_house_number2 = TRIM(TRIM(IT_GOUT_SUB_BUILDING) |: IT_GOUT_SUB_BUILDING_VALUE)
      SET dr_pobox_number  = PR_BOX1_NUMBER
      SET dr_city_name     = IT_GOUT_POSTAL_CITY
      SET dr_region_name   = IT_GOUT_STATE
      SET dr_postal_code   = IT_GOUT_POSTAL_CODE
      SET dr_address       = IT_GOUT_DELIVERY_ADDRESS
      IF(TRIM(dr_address) CONTAINS TRIM(IT_GOUT_BUILDING))
         SET dr_address2   = ""
      ELSE
         SET dr_address2   = IT_GOUT_BUILDING
      ENDIF
   ENDIF
   </CONDITION>
		</ENTRY>
		<ENTRY>
			<ENTRY_ID>5</ENTRY_ID>
			<FOR_FILES>OUTPUT</FOR_FILES>
			<CONDITION>SUBROUTINE
   /* SUBROUTINE: remove_blank_address_lines
/* +----------------------------------------------------------------------------+
/* | SUBROUTINE: remove_blank_address_lines                                     |
/* +----------------------------------------------------------------------------+
/*
/*   Removes blank or duplicate address lines from finished address.
/*
   IF(ALWAYS)
      /*... remove duplicate lines.
      IF(dr_address = dr_address2)
         SET dr_address2 = ""
      ENDIF
      IF(dr_address = dr_address3)
         SET dr_address3 = ""
      ENDIF
      IF(dr_address2 = dr_address3)
         SET dr_address3 = ""
      ENDIF
      /*... remove blank lines.
      IF(dr_address2 = "")
         SET dr_address2 = dr_address3
         SET dr_address3 = ""
      ENDIF
      IF(dr_address = "")
         SET dr_address  = dr_address2
         SET dr_address2 = ""
      ENDIF
   ENDIF
   </CONDITION>
		</ENTRY>
		<ENTRY>
			<ENTRY_ID>6</ENTRY_ID>
			<FOR_FILES>OUTPUT</FOR_FILES>
			<CONDITION>SUBROUTINE
   /* SUBROUTINE: set_address_case
/* +----------------------------------------------------------------------------+
/* | SUBROUTINE: set_address_case                                               |
/* +----------------------------------------------------------------------------+
/*
   IF(ALWAYS)
      SET dr_house_number2 = TCASE(DR_HOUSE_NUMBER2)
      SET dr_street_name   = TCASE(DR_STREET_NAME)
      SET dr_city_name     = TCASE(DR_CITY_NAME)
      SET dr_region_name   = UCASE(DR_REGION_NAME)
      SET dr_address       = TCASE(DR_ADDRESS)
      SET dr_address2      = TCASE(DR_ADDRESS2)
      SET dr_address3      = TCASE(DR_ADDRESS3)
   ENDIF
   </CONDITION>
		</ENTRY>
		<ENTRY>
			<ENTRY_ID>7</ENTRY_ID>
			<FOR_FILES>OUTPUT</FOR_FILES>
			<CONDITION>SUBROUTINE
   /* SUBROUTINE: set_name_fields_clear_busname
/* +----------------------------------------------------------------------------+
/* | SUBROUTINE: set_name_fields_clear_busname                                  |
/* +----------------------------------------------------------------------------+
/*
/*   This is an improved "set_name_fields" routine that also conditionally
/*   clears the busname fields.  It is used by EMEA.
/*
   IF(ALWAYS)
      /*... Set name fields.
      SET dr_business_name = TCASE(PR_BUSNAME_ORIGINAL_01)
      SET dr_alias_account = PR_BUSNAME_RECODED_01
      SET dr_alias_contact = PR_GIVEN_NAME1_RECODED_01
      SET dr_mrmrs         = TRIM(TCASE(NAME_PREFX_TXT))
      SET dr_first_name    = TRIM(TCASE(GVN_NAME))
      SET dr_middle_name   = TRIM(TCASE(MID_NAME))
      SET dr_last_name     = TRIM(TCASE(FAMLY_NAME))
      SET dr_name_gender   = TRIM(UCASE(GENDR_IND))
      SET dr_name_suffix   = TRIM(TCASE(NAME_SUFFX_TXT))
      /*... Clear business name fields, if name_form is not 1.
      IF(pr_name_form_01 != "1")
         SET dr_business_name = ""
         SET dr_alias_account = ""
      ENDIF
   ENDIF
   </CONDITION>
		</ENTRY>
	</ARGUMENTS>
</CONDITIONALS>
</PARAMETER>
    </OUTPUT>
    <PROCESS>
      <PARAMETER>
        <PROCESS_SETTINGS>
          <ARGUMENTS>
            <PROCESS_LOG_FILE_NAME>$(LOGS)/p5_it_drtranfrmr_log.txt</PROCESS_LOG_FILE_NAME>
            <ENABLE_DEBUG_OUTPUT>N</ENABLE_DEBUG_OUTPUT>
            <DEBUG_FILE_NAME>$(DEBUG)/p5_it_drtranfrmr_debug.txt</DEBUG_FILE_NAME>
            <MASK_FILE_NAME>$(GENERAL_RESOURCES)/maskfile$(PLAFEXT)</MASK_FILE_NAME>
<STRSUB_TABLE_FILE_NAME>$(GENERAL_RESOURCES)/strsub$(PLAFEXT)</STRSUB_TABLE_FILE_NAME>
          </ARGUMENTS>
        </PROCESS_SETTINGS>
      </PARAMETER>
    </PROCESS>
    <STATISTICS>
      <PARAMETER>
        <STATISTICS_SETTINGS>
          <ARGUMENTS>
            <STATS_FILE_NAME>$(STATS)/p5_it_drtranfrmr_stats.txt</STATS_FILE_NAME>
          </ARGUMENTS>
        </STATISTICS_SETTINGS>
      </PARAMETER>
    </STATISTICS>
  </CATEGORY>

</TRANFRMR>
    
